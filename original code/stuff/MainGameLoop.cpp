#include "raylib.h"
#include <vector>

int iTime = 0;
int iTimeReset = 0;
int iTimeafter = 0;

int sizeoffield = 20;

int goal = 0;
//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 1920;
    const int screenHeight = 1080;
    int widthfield = screenWidth/sizeoffield;
    int heightfield = screenHeight/sizeoffield - 1;


    InitWindow(screenWidth, screenHeight, "Jumpers");
    ToggleFullscreen();

    SetTargetFPS(60);
    iTimeReset = GetTime();

    // Map ist 94*51 mit 1 margin

    std::vector<std::vector<int>> level{
        {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 37, 37, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 37, 37, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 46, 46, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 38, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 38, 46, 35, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 38, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 38, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35}
    };

    std::vector<std::vector<int>> visibility(heightfield, std::vector<int>(widthfield, 0));

    std::vector<int> treasures{0,0,0,0,0,0};

    std::vector<int> player{0,0,1}; // 0-dead; 1-alive; 2-chargeOne; 3-chargeTwo
    player[0] = 7;
    player[1] = 7;
    int charge = 5;
    int dash = 0;

    int visionrange = 3;
    
    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
        iTime = GetTime() - iTimeReset;

        if(level[player[0]][player[1]] == 32) player[2] = 0;
        else player[2] = 1;

        if(!IsKeyDown(KEY_SPACE)){
            if(IsKeyPressed(KEY_UP) && level[player[0]- 1][player[1]] != 35) player[0]--;
            if(IsKeyPressed(KEY_DOWN) && level[player[0] + 1][player[1]] != 35) player[0]++;
            if(IsKeyPressed(KEY_LEFT) && level[player[0]][player[1]-1] != 35) player[1]--;
            if(IsKeyPressed(KEY_RIGHT) && level[player[0]][player[1]+1] != 35) player[1]++;

            iTimeafter = iTime;
        }else{
            if(iTimeafter < iTime - charge){
                if(iTimeafter < iTime - charge*2){
                    player[2] = 3;
                    if(IsKeyPressed(KEY_UP)){
                        for (int i = 0; !(!(i < charge*2) || (level[player[0]-i][player[1]] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[0] -= dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_DOWN)){
                        for (int i = 0; !(!(i < charge*2) || (level[player[0]+i][player[1]] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[0] += dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_LEFT)){
                        for (int i = 0; !(!(i < charge*2) || (level[player[0]][player[1]-i] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[1] -= dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_RIGHT)){
                        for (int i = 0; !(!(i < charge*2) || (level[player[0]][player[1]+i] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[1] += dash;
                        iTimeafter = iTime;
                    }
                }else{
                    player[2] = 2;
                    if(IsKeyPressed(KEY_UP)){
                        for (int i = 0; !(!(i < charge) || (level[player[0]-i][player[1]] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[0] -= dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_DOWN)){
                        for (int i = 0; !(!(i < charge) || (level[player[0]+i][player[1]] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[0] += dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_LEFT)){
                        for (int i = 0; !(!(i < charge) || (level[player[0]][player[1]-i] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[1] -= dash;
                        iTimeafter = iTime;
                    }
                    if(IsKeyPressed(KEY_RIGHT)){
                        for (int i = 0; !(!(i < charge) || (level[player[0]][player[1]+i] == 35)); i++)
                        {
                            dash = i;
                        }
                        player[1] += dash;
                        iTimeafter = iTime;

                    }
                } 
            }
        }

        for (int a = -visionrange; a <= visionrange; a++)
        {
            for (int b = -visionrange; b <= visionrange; b++)
            {
                visibility[player[0]+ a][player[1]+b] =255;
            }  
        } 

        if(level[player[0]][player[1]] == 38){
            if (treasures[0] == 0){
                treasures[1] = player[0];
                treasures[0] += 1;
            }else if(treasures[0] + 1 <= 6){
                treasures[treasures[0] + 1] = player[0];
                treasures[0] += 1;
                for (int i = 1; i < treasures[0]; i++)
                {
                    if(treasures[i] == player[0]){
                        treasures[treasures[0] + 1] = 0;
                        treasures[0] -= 1;
                    }
                }
            }
            if(treasures[0] == 5) goal = 1;
        }


        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();

            ClearBackground(BLACK);

            for (float i = 0; i < heightfield -2; i++)
            {
                for (float j = 0; j < widthfield-4;j++)
                {
                    if(i == player[0] && j == player[1]){
                        switch (player[2])
                        {
                        case 0:
                            DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, RED);
                            break;
                        case 1:
                            DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, GREEN);
                            break;
                        case 2:
                            DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, PINK);
                            break;
                        case 3:
                            DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, WHITE);
                            break;
                        default:
                            break;
                        }
                    }else if(level[i][j] == 38) DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){253,249,0,visibility[i][j]});
                     else if(level[i][j] == 37 && goal == 1) DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){0,228,48,visibility[i][j]});
                     else DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){255,255,255,visibility[i][j]});

                    for (int a = 1; a <= treasures[0]; a++)
                    {
                        if(level[i][j] == 38 && i == treasures[a])DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){0,121,241,visibility[i][j]});
                    }
                }
            }
            switch (treasures[0])
            {
            case 0:
                /* code */
                break;
            case 1:
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{1*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                break;
            case 2:
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{1*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                break;
            case 3:
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{1*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                break;
            case 4:
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{1*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{4*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                break;
            case 5:
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{1*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{4*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                DrawTextCodepoint(GetFontDefault(), 38,Vector2{5*sizeoffield +40,51*sizeoffield+20}, sizeoffield, YELLOW);
                break;
            default:
                break;
            }

        EndDrawing();
        //----------------------------------------------------------------------------------
    }
    
     CloseWindow();        // Close window and OpenGL context

    return 0;
}