#include "raylib.h"
#include <vector>
#include <math.h>

int screen = 0; // 0:Logo ; 1:Title; 2:Game; 3:Death; 4:Win

int iTime = 0;
int iTimeReset = 0;
int iTimeafter = 0;

int sizeoffield = 20;

int goal = 0;
//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------
int main(void)
{
    // Initialization
    //--------------------------------------------------------------------------------------
    const int screenWidth = 1920;
    const int screenHeight = 1080;
    int widthfield = screenWidth/sizeoffield;
    int heightfield = screenHeight/sizeoffield - 1;



    InitWindow(screenWidth, screenHeight, "Jumpers");
    ToggleFullscreen();

    SetTargetFPS(60);
    iTimeReset = GetTime();

    // Map ist 94*51 mit 1 margin

    std::vector<std::vector<int>> level{
        {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 37, 37, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 37, 37, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 46, 46, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 38, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 38, 46, 35, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 46, 32, 32, 32, 32, 46, 46, 46, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 35, 32, 32, 32, 32, 35, 35, 35, 35, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32},
        {35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 38, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 38, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35},
        {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35}
    };

    Image one = LoadImage("./img/!ROUGE_Screens_1.png");
    Image two = LoadImage("./img/!ROUGE_Screens_2.png");
    Image thr = LoadImage("./img/!ROUGE_Screens_3.png");
    Image fou = LoadImage("./img/!ROUGE_Screens_4.png");

    Texture2D One = LoadTextureFromImage(one);
    Texture2D Two = LoadTextureFromImage(two);
    Texture2D Three = LoadTextureFromImage(thr);
    Texture2D Four = LoadTextureFromImage(fou);

    UnloadImage(one);
    UnloadImage(two);
    UnloadImage(thr);
    UnloadImage(fou);

    std::vector<float> timeboard{0,0,0,0,0};
    std::vector<int> stepboard{0,0,0,0,0};
    int activeboard = 0;

    std::vector<std::vector<int>> visibility(heightfield, std::vector<int>(widthfield, 0));

    std::vector<int> treasures{0,0,0,0,0,0};

    std::vector<int> player{0,0,1}; // 0-dead; 1-alive; 2-chargeOne; 3-chargeTwo
    player[0] = 7;
    player[1] = 7;
    int charge = 5;
    int dash = 0;

    int visionrange = 3;

    float stopwatch = 0.0;
    float stopwatchreset  = 0.0;

    int steps = 0;

    int framescounter = 0;
    
    float FO = 51;
    float O = 1;
    
    int stage = 0;
    std::vector<int> stgToTimr={100,230,200,260,160};
    std::vector<int> stgToPowr = {0,0,1,0,2}; 

    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
        iTime = GetTime() - iTimeReset;

        switch (screen)
        {
        case 0: // LOGO
            
            framescounter++;
            if(framescounter >120){
                screen = 1;
                framescounter = 0;
            }
            break; 
        
        case 1: // Title Screen

                //std::vector<std::vector<int>> visibility(heightfield, std::vector<int>(widthfield, 0));

                for(int i = 0; i < heightfield; i++)
                {
                    for(int j = 0; j < widthfield; j++)
                    {
                        visibility[i][j] = 0;
                    }
                }

                treasures = {0,0,0,0,0,0};

                player = {0,0,1}; // 0-dead; 1-alive; 2-chargeOne; 3-chargeTwo
                player[0] = 7;
                player[1] = 7;
                dash = 0;
                stopwatch = 0.0;
                stopwatchreset  = 0.0;
                steps = 0;
                goal = 0;

            if(IsKeyPressed(KEY_SPACE)){
                stopwatchreset = GetTime();
                screen =2;
            }
            break;

        case 2: // Gameplay
        
            stopwatch = GetTime() - stopwatchreset;
            if(level[player[0]][player[1]] == 32) player[2] = 0;
            else player[2] = 1;
            if(player[2] != 0){
            if(goal == 1 && level[player[0]][player[1]] == 37) screen = 4;

            // Movement 
            if(!IsKeyDown(KEY_SPACE)){
                if(IsKeyPressed(KEY_UP) && level[player[0]- 1][player[1]] != 35) {
                    player[0]--;
                    steps++;
                }
                if(IsKeyPressed(KEY_DOWN) && level[player[0] + 1][player[1]] != 35) {
                    player[0]++;
                    steps++;
                }
                if(IsKeyPressed(KEY_LEFT) && level[player[0]][player[1]-1] != 35) {
                    player[1]--;
                    steps++;
                }
                if(IsKeyPressed(KEY_RIGHT) && level[player[0]][player[1]+1] != 35) {
                    player[1]++;
                    steps++;
                }

                iTimeafter = iTime;
            }else{
                if(iTimeafter < iTime - charge && stgToPowr[stage] == 1){
                    if(iTimeafter < iTime - charge*2 && stgToPowr[stage] == 2){
                        player[2] = 3;
                        if(IsKeyPressed(KEY_UP)){
                            for (int i = 0; !(!(i < charge*2) || (level[player[0]-i][player[1]] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[0] -= dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_DOWN)){
                            for (int i = 0; !(!(i < charge*2) || (level[player[0]+i][player[1]] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[0] += dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_LEFT)){
                            for (int i = 0; !(!(i < charge*2) || (level[player[0]][player[1]-i] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[1] -= dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_RIGHT)){
                            for (int i = 0; !(!(i < charge*2) || (level[player[0]][player[1]+i] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[1] += dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                    }else{
                        player[2] = 2;
                        if(IsKeyPressed(KEY_UP)){
                            for (int i = 0; !(!(i < charge) || (level[player[0]-i][player[1]] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[0] -= dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_DOWN)){
                            for (int i = 0; !(!(i < charge) || (level[player[0]+i][player[1]] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[0] += dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_LEFT)){
                            for (int i = 0; !(!(i < charge) || (level[player[0]][player[1]-i] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[1] -= dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                        if(IsKeyPressed(KEY_RIGHT)){
                            for (int i = 0; !(!(i < charge) || (level[player[0]][player[1]+i] == 35)); i++)
                            {
                                dash = i;
                            }
                            player[1] += dash;
                            iTimeafter = iTime;
                            steps++;
                        }
                    } 
                }
            }
            // Revealing of Land 
            for (int a = -visionrange; a <= visionrange; a++)
            {
                for (int b = -visionrange; b <= visionrange; b++)
                {
                    visibility[player[0]+ a][player[1]+b] =255;
                }  
            } 
            //  collecting Treasures
            if(level[player[0]][player[1]] == 38){
                if (treasures[0] == 0){
                    treasures[1] = player[0];
                    treasures[0] += 1;
                }else if(treasures[0] + 1 <= 6){
                    treasures[treasures[0] + 1] = player[0];
                    treasures[0] += 1;
                    for (int i = 1; i < treasures[0]; i++)
                    {
                        if(treasures[i] == player[0]){
                            treasures[treasures[0] + 1] = 0;
                            treasures[0] -= 1;
                        }
                    }
                }
                if(treasures[0] == 5) goal = 1;
            }
            }else{
                framescounter++;
                if(framescounter > 120)screen = 3;
            }
            break;

        case 3: // Death
            if(IsKeyPressed(KEY_SPACE)) screen = 1;
            break;

        case 4: //WIN
            if(IsKeyPressed(KEY_SPACE)) screen = 1;

                            if(timeboard[0] == 0 || (stopwatch < timeboard[0] && stopwatch != 0)){
                                timeboard[0] = stopwatch;
                                stepboard[0] = steps;
                                steps = 0;
                                stopwatch = 0;
                            }else if(timeboard[1] == 0 || (stopwatch < timeboard[1] && stopwatch != 0)){
                                timeboard[1] = stopwatch;
                                stepboard[1] = steps;
                                steps = 0;
                                stopwatch = 0;
                            }else if(timeboard[2] == 0 || (stopwatch < timeboard[2] && stopwatch != 0)){
                                timeboard[2] = stopwatch;
                                stepboard[2] = steps;
                                steps = 0;
                                stopwatch = 0;
                            }else if(timeboard[3] == 0 || (stopwatch < timeboard[3] && stopwatch != 0)){
                                timeboard[3] = stopwatch;
                                stepboard[3] = steps;
                                steps = 0;
                                stopwatch = 0;
                            }else if(timeboard[4] == 0 || (stopwatch < timeboard[4] && stopwatch != 0)){
                                timeboard[4] = stopwatch;
                                stepboard[4] = steps;
                                steps = 0;
                                stopwatch = 0;
                            }

            break;
        
        default:
            break;
        }


        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();

            ClearBackground(BLACK);

            switch (screen)
            {
            case 0:
                DrawTexture(One,0,0,WHITE);
                break;
            case 1:
                DrawTexture(Two,0,0,WHITE);
                break;
            case 2:
                for (float i = 0; i < heightfield -2; i++)
                {
                    for (float j = 0; j < widthfield-4;j++)
                    {
                        if(i == player[0] && j == player[1]){
                            switch (player[2])
                            {
                            case 0:
                                DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, RED);
                                break;
                            case 1:
                                DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, GREEN);
                                break;
                            case 2:
                                DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, PINK);
                                break;
                            case 3:
                                DrawTextCodepoint(GetFontDefault(), 64,Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, WHITE);
                                break;
                            default:
                                break;
                            }
                        }else if(level[i][j] == 38) DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){253,249,0,visibility[i][j]});
                        else if(level[i][j] == 37 && goal == 1) DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){0,228,48,visibility[i][j]});
                        else DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){255,255,255,visibility[i][j]});

                        for (int a = 1; a <= treasures[0]; a++)
                        {
                            if(level[i][j] == 38 && i == treasures[a])DrawTextCodepoint(GetFontDefault(), level[i][j],Vector2{j*sizeoffield +40,i*sizeoffield+20}, sizeoffield, (Color){0,121,241,visibility[i][j]});
                        }
                    }
                }
                switch (treasures[0])
                {
                    case 0:
                        /* code */
                        break;
                    case 1:
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        break;
                    case 2:
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        break;
                    case 3:
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        break;
                    case 4:
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{4*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        break;
                    case 5:
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{2*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{4*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{3*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        DrawTextCodepoint(GetFontDefault(), 38,Vector2{5*O*sizeoffield +40,FO*sizeoffield+20}, sizeoffield, YELLOW);
                        break;
                    default:
                        break;
                }
                //stopwatch = floorf(stopwatch * 100)/100;
                DrawText(TextFormat("%.2f", stopwatch), screenWidth/2, 51*sizeoffield, sizeoffield, WHITE);
                DrawText(TextFormat("%i", steps), screenWidth/2 + 75 , 51*sizeoffield, sizeoffield, WHITE);
                break;
            case 3:
                DrawTexture(Three,0,0,WHITE);
                break;
            case 4:
                DrawTexture(Four,0,0,WHITE);

                for (int a = 0; a < 5; a++)
                {
                    DrawText(TextFormat("%.2f", timeboard[a]), 960 + 120, a*128+200, 128, WHITE);
                }

                for (int a = 0; a < 5; a++)
                {
                    DrawText(TextFormat("%i", stepboard[a]), 1440 + 120, a*128 +200, 128, WHITE);
                }
                
                break;
            
            default:
                break;
            }

            

        EndDrawing();
        //----------------------------------------------------------------------------------
    }
    
     CloseWindow();        // Close window and OpenGL context

    return 0;
}